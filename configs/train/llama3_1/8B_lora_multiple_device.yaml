# Config for multi-GPU LoRA finetuning in lora_finetune_distributed.py
# using a Llama3.1 8B Instruct model
#
# This config assumes that you've run the following command before launching
# this run:
#   tune download meta-llama/Meta-Llama-3.1-8B-Instruct --output-dir /tmp/Meta-Llama-3.1-8B-Instruct --ignore-patterns "original/consolidated.00.pth"
#
# To launch on multiple GPUs on a single node, run the following command from root:
#   torchrun --nproc_per_node=4 --nnodes=1 tune run lora_finetune_distributed --config configs/train/llama3_1/8B_qlora_multiple_device.yaml 
# You can add specific overrides through the command line. For example
# to override the checkpointer directory while launching training
# you can run:
#   torchrun --standalone --nnodes=1 --nproc_per_node=4 ~/.conda/envs/llm4structgen/bin/tune run lora_finetune_distributed --config configs/train/llama3_1/8B_lora_multiple_device.yaml
# Model Arguments
model:
  _component_: torchtune.models.llama3_1.lora_llama3_1_8b
  lora_attn_modules: ['q_proj', 'v_proj']
  apply_lora_to_mlp: False
  apply_lora_to_output: False
  lora_rank: 8
  lora_alpha: 16
  # quantization_config:
  #   load_in_4bit: True
  #   bnb_4bit_compute_dtype: bf16
  #   bnb_4bit_use_double_quant: True
  #   bnb_4bit_quant_type: nf4

# Tokenizer
tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: /home/hice1/athalanki3/scratch/LLM4StructGen/model/original/tokenizer.model


checkpointer:
  _component_: torchtune.training.FullModelHFCheckpointer
  model_type: "LLAMA3"
  checkpoint_dir: /home/hice1/athalanki3/scratch/LLM4StructGen/model
  checkpoint_files: [
    model-00001-of-00004.safetensors,
    model-00002-of-00004.safetensors,
    model-00003-of-00004.safetensors,
    model-00004-of-00004.safetensors
  ]
  adapter_checkpoint: adapter_checkpoint.pt
  recipe_checkpoint: null
  output_dir: /home/hice1/athalanki3/scratch/LLM4StructGen/exp/lora-LLAMA3-cif-
resume_from_checkpoint: False
save_adapter_weights_only: True

# Dataset and Sampler
dataset:
  _component_: llm4structgen.datasets.torchtune_mp_dataset.text_completion_dataset
  data_files: /home/hice1/athalanki3/scratch/dataset_creation/top_5_mp_20
  initial_bandgap: /home/hice1/athalanki3/scratch/dataset_creation/mp_20/raw_train/targets.csv
  cif_files: /home/hice1/athalanki3/scratch/dataset_creation/mp_20/raw_train
  max_seq_len: 2096
  attributes: False
  translate: False
  rotate: False
  permute: False
  decimals: 2
  duplicate_count: 1
  packed: False
seed: 42  # Set a fixed seed for reproducibility
shuffle: True
batch_size: 8  # Reduced per-GPU batch size (assuming 4 GPUs: 8 × 4 = 32 total)

# Optimizer and Scheduler
optimizer:
  _component_: torch.optim.AdamW
  weight_decay: 0.01
  lr: 3e-4
lr_scheduler:
  _component_: torchtune.training.get_cosine_schedule_with_warmup
  num_warmup_steps: 100

loss:
  _component_: torch.nn.CrossEntropyLoss

# Training
epochs: 10
max_steps_per_epoch: null
gradient_accumulation_steps: 16  # Reduced from 64 (assuming 4 GPUs: 4 × 16 = 64 total)
compile: False

# Logging
output_dir: exp/logs
metric_logger:
  _component_: torchtune.training.metric_logging.WandBLogger
  project: torchtune-llm4structgen
  log_dir: ${output_dir}
  name: multi_gpu_lora_run
log_every_n_steps: 1
log_peak_memory_stats: False

# Environment
device: cuda
dtype: bf16
enable_activation_checkpointing: True

# Profiler (disabled)
profiler:
  _component_: torchtune.training.setup_torch_profiler
  enabled: False
  output_dir: ${output_dir}/profiling_outputs
  cpu: True
  cuda: True
  profile_memory: False
  with_stack: False
  record_shapes: True
  with_flops: False
  wait_steps: 5
  warmup_steps: 5
  active_steps: 2
  num_cycles: 1